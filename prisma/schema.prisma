// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customers {
  idAuto    Int      @id @default(autoincrement())
  id        String   @unique
  email     String?
  name      String
  lastName  String
  phone     String?
  address   String?
  orders    Orders[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Orders {
  idAuto     Int       @id @default(autoincrement())
  id         String    @unique
  type       OrderType
  price      Float
  usdAmount  Float
  pesoAmount Float
  customer   Customers @relation(fields: [customerId], references: [idAuto])
  balance    Balance   @relation(fields: [balanceId], references: [idAuto])
  balanceId  Int
  customerId Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Balance {
  idAuto             Int          @id @default(autoincrement())
  id                 String       @unique
  usdInitialAmount   Float
  pesosInitialAmount Float
  usdAmount          Float
  pesosAmount        Float
  state              BalanceState
  orders             Orders[]
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
}

model Prices {
  idAuto       String   @id @default(cuid())
  id           String   @unique
  currency     String
  priceBuy     Float
  priceSell    Float
  sourceOrigin String
  createdAt    DateTime @default(now())
}

model PricesConfig {
  idAuto        Int      @id @default(autoincrement())
  id            String   @unique
  SourceOrigin  String // URL
  timeToRefresh Int      @default(60) // in minutes
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Users {
  idAuto    Int      @id @default(autoincrement())
  id        String   @unique
  email     String   @unique
  name      String
  lastName  String
  profile   Profile?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  idAuto    Int      @id @default(autoincrement())
  id        String   @unique
  role      Role     @default(USER)
  user      Users    @relation(fields: [userId], references: [idAuto])
  enabled   Boolean  @default(true)
  password  String
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum OrderType {
  BUY
  SELL
}

enum BalanceState {
  OPEN
  CLOSED
}

enum Role {
  ADMIN
  USER
}
